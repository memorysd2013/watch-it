// ÊîØÊè¥ÁöÑË≤®Âπ£ÈÖçÁΩÆ
export const SUPPORTED_CURRENCIES = {
  USD: {
    code: 'USD',
    name: 'ÁæéÈáë',
    symbol: '$',
    flag: 'üá∫üá∏',
    description: 'ÁæéÂúãÁæéÂÖÉ'
  },
  TWD: {
    code: 'TWD',
    name: 'Âè∞Âπ£',
    symbol: 'NT$',
    flag: 'üáπüáº',
    description: 'Êñ∞Âè∞Âπ£'
  },
  EUR: {
    code: 'EUR',
    name: 'Ê≠êÂÖÉ',
    symbol: '‚Ç¨',
    flag: 'üá™üá∫',
    description: 'Ê≠êÂÖÉ'
  },
  JPY: {
    code: 'JPY',
    name: 'Êó•Âúì',
    symbol: '¬•',
    flag: 'üáØüáµ',
    description: 'Êó•Êú¨Êó•Âúì'
  },
  GBP: {
    code: 'GBP',
    name: 'Ëã±Èéä',
    symbol: '¬£',
    flag: 'üá¨üáß',
    description: 'Ëã±ÂúãËã±Èéä'
  },
  AUD: {
    code: 'AUD',
    name: 'Êæ≥Âπ£',
    symbol: 'A$',
    flag: 'üá¶üá∫',
    description: 'Êæ≥Ê¥≤Êæ≥Âπ£'
  },
  CAD: {
    code: 'CAD',
    name: 'Âä†Âπ£',
    symbol: 'C$',
    flag: 'üá®üá¶',
    description: 'Âä†ÊãøÂ§ßÂä†Âπ£'
  },
  CHF: {
    code: 'CHF',
    name: 'ÁëûÂ£´Ê≥ïÈÉé',
    symbol: 'CHF',
    flag: 'üá®üá≠',
    description: 'ÁëûÂ£´Ê≥ïÈÉé'
  },
  CNY: {
    code: 'CNY',
    name: '‰∫∫Ê∞ëÂπ£',
    symbol: '¬•',
    flag: 'üá®üá≥',
    description: '‰∏≠Âúã‰∫∫Ê∞ëÂπ£'
  },
  KRW: {
    code: 'KRW',
    name: 'ÈüìÂúì',
    symbol: '‚Ç©',
    flag: 'üá∞üá∑',
    description: 'ÈüìÂúãÈüìÂúì'
  }
}

// È†êË®≠ÁöÑÂåØÁéáÂ∞ç
export const DEFAULT_CURRENCY_PAIRS = [
  { from: 'USD', to: 'TWD', name: 'ÁæéÈáë/Âè∞Âπ£', description: 'ÁæéÈáëÂ∞çÂè∞Âπ£ÂåØÁéá' },
  { from: 'TWD', to: 'USD', name: 'Âè∞Âπ£/ÁæéÈáë', description: 'Âè∞Âπ£Â∞çÁæéÈáëÂåØÁéá' },
  { from: 'USD', to: 'EUR', name: 'ÁæéÈáë/Ê≠êÂÖÉ', description: 'ÁæéÈáëÂ∞çÊ≠êÂÖÉÂåØÁéá' },
  { from: 'USD', to: 'JPY', name: 'ÁæéÈáë/Êó•Âúì', description: 'ÁæéÈáëÂ∞çÊó•ÂúìÂåØÁéá' },
  { from: 'EUR', to: 'TWD', name: 'Ê≠êÂÖÉ/Âè∞Âπ£', description: 'Ê≠êÂÖÉÂ∞çÂè∞Âπ£ÂåØÁéá' },
  { from: 'JPY', to: 'TWD', name: 'Êó•Âúì/Âè∞Âπ£', description: 'Êó•ÂúìÂ∞çÂè∞Âπ£ÂåØÁéá' }
]

// ÊôÇÈñìÈÄ±ÊúüÈÖçÁΩÆ
export const TIME_PERIODS = [
  { value: '1W', label: '1ÈÄ±', days: 7 },
  { value: '1M', label: '1Êúà', days: 30 },
  { value: '3M', label: '1Â≠£', days: 90 },
  { value: '6M', label: 'ÂçäÂπ¥', days: 180 },
  { value: '1Y', label: '1Âπ¥', days: 365 }
]

// Áç≤ÂèñË≤®Âπ£Ë≥áË®ä
export const getCurrencyInfo = (currencyCode) => {
  return SUPPORTED_CURRENCIES[currencyCode] || {
    code: currencyCode,
    name: currencyCode,
    symbol: currencyCode,
    flag: 'üåç',
    description: `${currencyCode} Ë≤®Âπ£`
  }
}

// Áç≤ÂèñÂåØÁéáÂ∞çË≥áË®ä
export const getCurrencyPairInfo = (fromCurrency, toCurrency) => {
  const fromInfo = getCurrencyInfo(fromCurrency)
  const toInfo = getCurrencyInfo(toCurrency)
  
  return {
    from: fromInfo,
    to: toInfo,
    pair: `${fromCurrency}/${toCurrency}`,
    name: `${fromInfo.name}/${toInfo.name}`,
    description: `${fromInfo.name}Â∞ç${toInfo.name}ÂåØÁéá`
  }
}

// Ê™¢Êü•ÊòØÂê¶ÊîØÊè¥Ë©≤Ë≤®Âπ£
export const isSupportedCurrency = (currencyCode) => {
  return currencyCode in SUPPORTED_CURRENCIES
}

// Áç≤ÂèñÊâÄÊúâÊîØÊè¥ÁöÑË≤®Âπ£‰ª£Á¢º
export const getSupportedCurrencyCodes = () => {
  return Object.keys(SUPPORTED_CURRENCIES)
}

// Áç≤ÂèñÊâÄÊúâÊîØÊè¥ÁöÑË≤®Âπ£ÂàóË°®
export const getSupportedCurrencies = () => {
  return Object.values(SUPPORTED_CURRENCIES)
}

// Ê†ºÂºèÂåñË≤®Âπ£È°ØÁ§∫
export const formatCurrencyDisplay = (currencyCode, amount, options = {}) => {
  const currencyInfo = getCurrencyInfo(currencyCode)
  const { showSymbol = true, showFlag = false, decimals = 4 } = options
  
  let display = ''
  
  if (showFlag) {
    display += `${currencyInfo.flag} `
  }
  
  if (showSymbol) {
    display += `${currencyInfo.symbol}`
  }
  
  if (amount !== undefined && amount !== null) {
    const formattedAmount = parseFloat(amount).toLocaleString('en-US', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    })
    display += formattedAmount
  }
  
  return display
}

// Áç≤ÂèñÊôÇÈñìÈÄ±ÊúüË≥áË®ä
export const getTimePeriodInfo = (periodValue) => {
  return TIME_PERIODS.find(period => period.value === periodValue) || TIME_PERIODS[1] // È†êË®≠1Êúà
}

export default {
  SUPPORTED_CURRENCIES,
  DEFAULT_CURRENCY_PAIRS,
  TIME_PERIODS,
  getCurrencyInfo,
  getCurrencyPairInfo,
  isSupportedCurrency,
  getSupportedCurrencyCodes,
  getSupportedCurrencies,
  formatCurrencyDisplay,
  getTimePeriodInfo
}
